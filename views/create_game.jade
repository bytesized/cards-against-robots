extends layout

block headers
	title Create Game - #{config.site_name}

block scripts
	script(src='/javascripts/validator.min.js')
	script(src='/javascripts/common/room.js')
	script(src='/javascripts/create_game/validate_room.js')
	script
		| validate_room.room_name.set_input('#name_input');
		| validate_room.password.set_input('#password_input');
		| validate_room.objective.set_input('#objective_input');
		| validate_room.hand_size.set_input('#hand_size_input');
		| validate_room.max_players.set_input('#max_players_input');
		| validate_room.redraws.set_input('#redraws_input');
		| validate_room.decks.set_input('#create_game_btn', '#selected_decks-input');
	script(src='/javascripts/ajax_request_queue.js')
	script
		| request_queue = new ajax_request_queue();
	script(src='/javascripts/html.js')
	script(src='/javascripts/create_game/deck_list.js')
	script(src='/javascripts/create_game/selected_decks.js')
	script
		| selected_decks.init(!{JSON.stringify(auto_load_decks)});
	script(src='/javascripts/create_game/deck_row_signals.js')
	script(src='/javascripts/create_game/deck_row_manager.js')


//- Makes a deck list 
//- Each deck name span has the class `deck_list_text`.
//- Each card count badge has the class `deck_list_card_count`.
//- The list has the class `deck_list_group`.
//- Each row has the class `deck_list_item` and `data-deck_id = deck.id`
//- Available options:
//-  + add_button        If true, a button intended for adding the deck is included. It will be created
//-                      with class `add_deck`
//-  + remove_button     If true, a button intended for removing the deck is included. It will be
//-                      created with class `remove_deck`
//-  + id                Sets the id of the deck list to the one given
//-  + class             Adds the class(es) given to the deck list
//-  + template          If true, the deck list will be created with `display: none;` and a single empty
//-                      row, suitable for inserting deck data into with javascript. If this option is
//-                      given, the `decks` argument will be overridden, so its content does not matter
mixin deck_list(decks, options)
	- if (options.template) decks = [{name: '', card_count: ''}];
	.list-group.deck_list_group(id=options.id, class=options.class, style=(options.template ? 'display: none;' : ''))
		each deck in decks
			.list-group-item.deck_list_item(data-deck_id=deck.id)
				.flex_container
					if options.add_button
						.flex_noexpand
							span.add_deck.btn.btn-default(style='margin-right: 7px;')
								span.glyphicon.glyphicon-plus(style='margin-left: 2px; margin-right: 2px;')
					if options.remove_button
						.flex_noexpand
							span.remove_deck.btn.btn-default(style='margin-right: 7px;')
								span.glyphicon.glyphicon-minus(style='margin-left: 2px; margin-right: 2px;')
					.flex_expand.hard_wrap(style='margin-top: 7px; margin-bottom: 7px;')
						span.deck_list_text #{deck.name}
					.flex_noexpand
						span.badge.deck_list_card_count(style='margin-left: 7px;') #{deck.card_count}

block content
	//- Set default values
	- if (!form_data) form_data = {};
	- if (typeof form_data.public       === 'undefined') form_data.public       = true;
	- if (typeof form_data.objective    === 'undefined') form_data.objective    = 12;
	- if (typeof form_data.hand_size    === 'undefined') form_data.hand_size    = 10;
	- if (typeof form_data.max_players  === 'undefined') form_data.max_players  = 6;
	- if (typeof form_data.redraws      === 'undefined') form_data.redraws      = 0;
	+deck_list([], {template: true, id: 'deck_list-template', add_button: true, remove_button: true})
	.container
		.row
			+game_navbar('create')
		.row
			.col-xs-12
				ul.list-group
					+flash_messages
				ul.list-group
					+validation_errors
		form.form-horizontal(method='POST')
			.panel.panel-default
				.panel-body
					.form-group(class=input_status.name)
						label.control-label.col-xs-12.col-sm-2(for='name_input') Room Name
						.col-xs-12.col-sm-10
							input.form-control(type='text', id='name_input', name='name', placeholder='Room Name', value=form_data.name)
					.form-group(class=input_status.public)
						.col-xs-12.col-sm-offset-2.col-sm-10
							.checkbox
								label.checkbox
									input(type='checkbox', name='public', checked=form_data.public)
									| Publicly Listed Game
					.form-group(class=input_status.password)
						label.control-label.col-xs-12.col-sm-2(for='password_input') Room Password
						.col-xs-12.col-sm-10
							input.form-control(type='text', id='password_input', name='password', placeholder='Password', value=form_data.password)
							span.help-block If password is blank, anyone may join
			.panel.panel-default
				.panel-body
					.form-group(class=input_status.objective)
						label.control-label.col-xs-12.col-sm-2(for='objective_input') Objective
						.col-xs-12.col-sm-10
							input.form-control(type='text', id='objective_input', name='objective', placeholder='Number of Points', value=form_data.objective)
							span.help-block Number of points to win (1-50)
					.form-group(class=input_status.hand_size)
						label.control-label.col-xs-12.col-sm-2(for='hand_size_input') Hand Size
						.col-xs-12.col-sm-10
							input.form-control(type='text', id='hand_size_input', name='hand_size', placeholder='Number of Cards', value=form_data.hand_size)
							span.help-block Number of cards dealt to each player (2-40)
					.form-group(class=input_status.max_players)
						label.control-label.col-xs-12.col-sm-2(for='max_players_input') Maximum Players
						.col-xs-12.col-sm-10
							input.form-control(type='text', id='max_players_input', name='max_players', placeholder='Number of Players', value=form_data.max_players)
							span.help-block Number of players that can be in the game simultaneously (3 - 25)
					.form-group(class=input_status.redraws)
						label.control-label.col-xs-12.col-sm-2(for='redraws_input') Redraws
						.col-xs-12.col-sm-10
							input.form-control(type='text', id='redraws_input', name='redraws', placeholder='Number of Redraws', value=form_data.redraws)
							span.help-block A redraw can be used during a player's turn to discard all cards and draw a new hand
			.panel.panel-default
				.panel-body
					.row
						.col-md-12.col-lg-6
							ul.nav.nav-tabs
								li.active
									a(data-toggle='tab', href='#my_decks_tab') My Decks
								li
									a(data-toggle='tab', href='#fav_decks_tab') Favorites
								li
									a(data-toggle='tab', href='#top_decks_tab') Popular
								li
									a(data-toggle='tab', href='#search_decks_tab') Search
								li
									a(data-toggle='tab', href='#standard_decks_tab') Standard
							.tab-content
								#my_decks_tab.tab-pane.fade.in.active
									if user_decks.length === 0
										.list-group
											.list-group-item
												i You have no decks
									else
										+deck_list(user_decks, {class: 'deck_row_manager-add_list', add_button: true})
								#fav_decks_tab.tab-pane.fade
									h3 Coming Soon
								#top_decks_tab.tab-pane.fade
									h3 Coming Soon
								#search_decks_tab.tab-pane.fade
									h3 Coming Soon
								#standard_decks_tab.tab-pane.fade
									if standard_decks.length === 0
										.list-group
											.list-group-item
												i There are no standard decks
									else
										+deck_list(standard_decks, {class: 'deck_row_manager-add_list', add_button: true})
						.col-md-12.col-lg-6
							h3 Selected Decks
							input#selected_decks-input(type='hidden', name='decks', value='[]')
							//- Make an empty list which we will put things in with Javascript
							+deck_list([], {id: 'selected_decks-list', remove_button: true})
			.form-group
				.col-xs-12.col-sm-offset-2.col-sm-10
					button#create_game_btn.btn.btn-primary.btn-lg(type='submit') Create Game
