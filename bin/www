#!/usr/bin/env node
"use strict";

/**
 * Module dependencies.
 */

var path = require('path');
var debug = require('debug')('cards_against_robots:server');
var express = require('express');
var http = require('http');
var https = require('https');
var fs = require('fs');

// Create uninitialized express app
var app = express();

/**
 * Get port from environment and store in Express.
 */

var key_path = path.normalize(path.join(__dirname, '..', 'keys', 'key.pem'));
var cert_path = path.normalize(path.join(__dirname, '..', 'keys', 'cert.pem'));
var ca_path = path.normalize(path.join(__dirname, '..', 'keys', 'ca.crt'));

var server;
if (fs.existsSync(key_path) && fs.existsSync(cert_path))
{
	var port = normalizePort(process.env.PORT || '443');
	app.set('port', port);

	/**
	 * Create HTTPS server.
	 */

	var server_options = {
		key: fs.readFileSync(key_path),
		cert: fs.readFileSync(cert_path)
	};

	if (fs.existsSync(ca_path))
		server_options.ca = fs.readFileSync(ca_path);

	server = https.createServer(server_options, app);

	// Redirect HTTP requests to HTTPS
	if (port != 80)
	{
		http.createServer(function(req, res)
		{
			res.writeHead(302, { "Location": "https://" + req.headers['host'] + req.url });
			res.end();
		}).listen(80);
	}
} else
{
	// If keys do not exist, just use regular HTTP (instead of HTTPS)
	// NOTE: This feature ONLY exists because some hosting services, such as 
	// Microsoft Azure take care of SSL on their own, so HTTPS can be provided
	// without configuring it here
	// HTTP connections are NOT SUPPORTED and WILL NOT WORK because secure cookies
	// are enabled.
	var port = normalizePort(process.env.PORT || '80');
	app.set('port', port);

	server = http.createServer(app);
}

// Initialize app
app = require(path.normalize(path.join(__dirname, '..', 'app')))(app, server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}
